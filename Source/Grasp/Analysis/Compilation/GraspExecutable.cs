using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Text;

namespace Grasp.Analysis.Compilation
{
	/// <summary>
	/// An executable version of a <see cref="GraspSchema"/> which applies its calculations
	/// </summary>
	public class GraspExecutable
	{
		/// <summary>
		/// Initializes an executable with the specified schema and calculator
		/// </summary>
		/// <param name="schema">The schema which generated this executable</param>
		/// <param name="calculator">The calculator which applies the schema's calculations to runtimes generated by this executable</param>
		public GraspExecutable(GraspSchema schema, ICalculator calculator)
		{
			Contract.Requires(schema != null);
			Contract.Requires(calculator != null);

			Schema = schema;
			Calculator = calculator;
		}

		/// <summary>
		/// Gets the schema which generated this executable
		/// </summary>
		public GraspSchema Schema { get; private set; }

		/// <summary>
		/// Gets the calculator which applies <see cref="Schema"/>'s calculations to runtimes generated by this executable
		/// </summary>
		public ICalculator Calculator { get; private set; }

		/// <summary>
		/// Generates a runtime with variables bound to the values yielded by the specified initial state
		/// </summary>
		/// <param name="initialState">The initial state of the variables in the generated runtime</param>
		/// <returns>A runtime with variables bound to the values yielded by the specified initial state</returns>
		public GraspRuntime GetRuntime(IRuntimeSnapshot initialState)
		{
			Contract.Requires(initialState != null);

			return new GraspRuntime(Schema, Calculator, GetBindings(initialState));
		}

		private IEnumerable<VariableBinding> GetBindings(IRuntimeSnapshot initialState)
		{
			return Schema.Variables.Select(variable => new VariableBinding(variable, initialState.GetValue(variable)));
		}
	}
}