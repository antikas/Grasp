<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Cloak.Autofac</name>
  </assembly>
  <members>
    <member name="T:Cloak.Autofac.ApplicationComposition">
      <summary>
            The composition of an application composed with an Autofac container
            </summary>
    </member>
    <member name="M:Cloak.Autofac.ApplicationComposition.#ctor(Autofac.Core.IModule)">
      <summary>
            Initializes an application composition with the specified module
            </summary>
      <param name="module">The module which provides the application's composition</param>
      <requires>module != null</requires>
    </member>
    <member name="M:Cloak.Autofac.ApplicationComposition.Dispose">
      <summary>
            Disposes of <see cref="P:Cloak.Autofac.ApplicationComposition.Container" /></summary>
    </member>
    <member name="M:Cloak.Autofac.ApplicationComposition.Compose">
      <summary>
            Initializes <see cref="P:Cloak.Autofac.ApplicationComposition.Container" /></summary>
    </member>
    <member name="P:Cloak.Autofac.ApplicationComposition.Container">
      <summary>
            Gets the container configured by this application composition
            </summary>
    </member>
    <member name="T:Cloak.Autofac.ApplicationComposition`1">
      <summary>
            The composition of an application composed with an Autofac container
            </summary>
      <typeparam name="TModule">The type of module which configures the container</typeparam>
    </member>
    <member name="M:Cloak.Autofac.ApplicationComposition`1.Dispose">
      <summary>
            Disposes of <see cref="P:Cloak.Autofac.ApplicationComposition`1.Container" /></summary>
    </member>
    <member name="M:Cloak.Autofac.ApplicationComposition`1.Compose">
      <summary>
            Initializes <see cref="P:Cloak.Autofac.ApplicationComposition`1.Container" /></summary>
    </member>
    <member name="P:Cloak.Autofac.ApplicationComposition`1.Container">
      <summary>
            Gets the container configured by this application composition
            </summary>
    </member>
    <member name="T:Cloak.Autofac.BuilderModule">
      <summary> 
             Combines the concepts of <see cref="T:Autofac.ContainerBuilder" /> and <see cref="T:Autofac.Core.IModule" /> to create a registration syntax
             which does not require an external builder variable
             </summary>
      <remarks>
             BuilderModule allows registration through instance methods, which seems cleaner than overriding a
             base method and using a builder variable. When done in the constructor, it requires no member variables.
             It also makes helper methods easier because the builder doesn't have to be passed around.
            
             In Autofac 2, registration methods are extension methods on ContainerBuilder. The methods below turn the
             extension methods into instance methods to achieve an optimal syntax.
             </remarks>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.Configure(Autofac.Core.IComponentRegistry)">
      <summary>
            Apply the module to the component registry.
            </summary>
      <param name="componentRegistry">Component registry to apply configuration to.</param>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.Register``1(System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
      <summary>
            Register a delegate as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="delegate">The delegate to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.Register``1(System.Func{Autofac.IComponentContext,``0})">
      <summary>
            Register a delegate as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="delegate">The delegate to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterAdapter``2(System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``1})">
      <summary>
            Adapt all components implementing service TFrom to provide TTo using the provided adapter function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the same as TFrom.</typeparam>
      <param name="adapter">Function adapting TFrom to service TTo, given the context and parameters.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterAdapter``2(System.Func{Autofac.IComponentContext,``0,``1})">
      <summary>
            Adapt all components implementing service TFrom to provide TTo using the provided adapter function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the same as TFrom.</typeparam>
      <param name="adapter">Function adapting TFrom to service TTo, given the context.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterAdapter``2(System.Func{``0,``1})">
      <summary>
            Adapt all components implementing service TFrom to provide TTo using the provided adapter function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the same as TFrom.</typeparam>
      <param name="adapter">Function adapting TFrom to service TTo.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterAssemblyTypes(System.Reflection.Assembly[])">
      <summary>
            Register the types in an assembly.
            </summary>
      <param name="assemblies">The assemblies from which to register types.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterComponent(Autofac.Core.IComponentRegistration)">
      <summary>
            Add a component to the container.
            </summary>
      <param name="registration">The component to add.</param>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterGeneric(System.Type)">
      <summary>
            Register an un-parameterised generic type, e.g. Repository&lt;&gt;.  Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
      <param name="implementor">The open generic implementation type.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterInstance``1(``0)">
      <summary>
            Register an instance as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="instance">The instance to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterModule``1">
      <summary>
            Add a module to the container.
            </summary>
      <typeparam name="TModule">The module to add.</typeparam>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterModule(Autofac.Core.IModule)">
      <summary>
            Add a module to the container.
            </summary>
      <param name="module">The module to add.</param>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterSource(Autofac.Core.IRegistrationSource)">
      <summary>
            Add a registration source to the container.
            </summary>
      <param name="registrationSource">The registration source to add.</param>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterType``1">
      <summary>
            Register a component to be created through reflection.
            </summary>
      <typeparam name="TImplementor">The type of the component implementation.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Cloak.Autofac.BuilderModule.RegisterType(System.Type)">
      <summary>
            Register a component to be created through reflection.
            </summary>
      <param name="implementationType">The type of the component implementation.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
  </members>
</doc>